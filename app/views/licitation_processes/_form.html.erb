<div class="tabs">
  <ul>
    <li>
      <a href="#main">Principal</a>
    </li>

    <li>
      <a href="#documents">Documentos</a>
    </li>

    <li>
      <a href="#budget_allocations">Dotações orçamentárias</a>
    </li>

    <li>
      <a href="#calculation_configuration">Configuração da apuração</a>
    </li>
  </ul>

  <div id="main">
    <%= render 'main', :f => f %>
  </div>

  <div id="documents">
    <%= render 'documents', :f => f %>
  </div>

  <div id="budget_allocations">
    <%= render 'budget_allocations', :f => f %>
  </div>

  <div id="calculation_configuration">
    <%= render 'calculation_configuration', :f => f %>
  </div>
</div>

<script>
  function cleanExistingAdministrativeProcessBudgetAllocations() {
    $(".licitation-process-budget-allocation").remove()
  }

  function createAdministrativeProcessBudgetAllocations(budgetAllocations) {
    cleanExistingAdministrativeProcessBudgetAllocations();

    var template = $('#administrative-process-budget-allocations-template'),
        target = $('#budget-allocations');

    $(budgetAllocations).each(function () {
      target.append(template.mustache({id: this.id,
                                       description: this.description,
                                       administrative_process_id: this.administrative_process_id,
                                       budget_allocation_id: this.budget_allocation_id,
                                       uuid_administrative_process_budget_allocation: _.uniqueId('fresh-'),
                                       value: numberWithDelimiter(this.value),
                                       expenseNature: this.expense_nature,
                                       amount: numberWithDelimiter(this.amount)}));
    });
  }

  $('form.licitation_process').on('change', '.material', function (event, material) {
    if (material){
      $(this).closest('.item').find('.reference-unit').val(material.reference_unit);
    }
  });

  function calcItemOrder() {
    $('fieldset.licitation-process-budget-allocation').each(function (index, item) {
      $(this).find('.item .hidden .destroy[value=false]').each(function (index, item) {
        $(this).closest('.licitation-process-budget-allocation .item').find('.order').val(index + 1);
      });
    });
  }

  function calculateTotalOfItems(administrativeProcessBudgetAllocation) {
    var itemPrices = administrativeProcessBudgetAllocation.find('.item-price:visible'),
        totalValue = 0;

    itemPrices.each(function () {
      totalValue += parsePtBrFloat(this.value);
    });

    administrativeProcessBudgetAllocation.find('.total-value').val(numberWithDelimiter(totalValue));
  }

  $('form.licitation_process').on('click', '.remove-item', function () {
    calcItemOrder();
    calculateTotalOfItems($(this).closest('.licitation-process-budget-allocation'));
  });

  $('form.licitation_process').on('nestedForm:afterAdd', function (){
    calcItemOrder();
  });

  calcItemOrder();

  $('form.licitation_process').on('keyup', '.item-quantity, .item-unit-price', function() {
    var itemDiv = $(this).closest('.item'),
        itemQuantity = new BigNumber(parsePtBrFloat(itemDiv.find('.item-quantity').val() || '0')),
        itemUnitPrice = new BigNumber(parsePtBrFloat(itemDiv.find('.item-unit-price').val() || '0')),
        total = numberWithDelimiter(parseFloat(itemQuantity.multiply(itemUnitPrice)));

    itemDiv.find('.item-price').val(total);
    calculateTotalOfItems(itemDiv.closest('.licitation-process-budget-allocation'));
  });

  $('form.licitation_process').on('keyup', '.item-price', function () {
    var itemDiv = $(this).closest('.item'),
        itemQuantity = new BigNumber(parsePtBrFloat(itemDiv.find('.item-quantity').val() || '0')),
        itemPrice = new BigNumber(parsePtBrFloat(itemDiv.find('.item-price').val() || '0')),
        unitPrice = numberWithDelimiter(0);

    if (itemQuantity != '0') {
      unitPrice = itemPrice.divide(itemQuantity);
      unitPrice = numberWithDelimiter(parseFloat(unitPrice));
    }

    itemDiv.find('.item-unit-price').val(unitPrice);
    calculateTotalOfItems(itemDiv.closest('.licitation-process-budget-allocation'));
  });

  function filterTypesOfCalculation (judgmentKind, objectType, modality) {
    var typesOfCalculationGroupsForJudgmentFormKind = <%= LicitationProcessTypesOfCalculationByJudgmentFormKind.new.types_of_calculation_groups.to_json.html_safe %>,
        typesOfCalculationGroupsForObjectType   = <%= LicitationProcessTypesOfCalculationByObjectType.new.types_of_calculation_groups.to_json.html_safe %>,
        typesOfCalculationGroupsForModality     = <%= LicitationProcessTypesOfCalculationByModality.new.types_of_calculation_groups.to_json.html_safe %>,
        typesOfCalculationOptions               = _(<%= LicitationProcessTypeOfCalculation.to_a.to_json.html_safe %>),
        options                                 = typesOfCalculationGroupsForJudgmentFormKind[judgmentKind] || [],
        optionsForObjectType                    = _(typesOfCalculationGroupsForObjectType[objectType] || []),
        optionsForModality                      = _(typesOfCalculationGroupsForModality[modality] || []);

    if (!optionsForObjectType.include(options[1])) {
      delete options[1];
    }

    if (!optionsForModality.include(options[2])) {
      delete options[2];
    }

    if (_.size(options) == 0) {
      $("#licitation_process_type_of_calculation").empty().closest("div.input").hide();
      return;
    }

    $("#licitation_process_type_of_calculation").html("<option></option>").closest("div.input").show();

    typesOfCalculationOptions.each(function (option) {
      if (modality == 'auction') {
        if (optionsForModality.include(option[1])) {
          $("#licitation_process_type_of_calculation").append(function () {
            return $("<option>").text(option[0]).val(option[1]);
          });
        }
      } else {
        if (_(options).include(option[1])) {
          $("#licitation_process_type_of_calculation").append(function () {
            return $("<option>").text(option[0]).val(option[1]);
          });
        }
      }
    });
  }

  filterTypesOfCalculation('<%= f.object.administrative_process_judgment_form_kind %>',
                           '<%= f.object.administrative_process_object_type %>',
                           '<%= f.object.administrative_process_modality %>');

  $('#licitation_process_judgment_form_id').change(function() {
    var options = _(<%= f.object.decorator.judgment_forms_available.to_json.html_safe %>),
        currentJudgmentFormId = $(this).val();

    options.each(function(judgmentForm) {
      if (judgmentForm.id == currentJudgmentFormId){
        filterTypesOfCalculation(judgmentForm.kind, '<%= f.object.administrative_process_object_type %>', '<%= f.object.administrative_process_modality %>');
        return;
      }
    });
  });

  $("#licitation_process_type_of_calculation").val("<%= f.object.type_of_calculation %>");

  <% unless resource.updatable? %>
    $(function(){
      $('form.licitation_process [data-disabled]').on('click', function(event){
        event.stopImmediatePropagation();
        return false;
      });
      $('form.licitation_process :input').not('[data-disabled]').attr('disabled', true);
    });
  <% end %>

  <% if resource.decorator.disable_budget_allocations? %>
    $("#budget_allocations :input").attr("disabled", "disabled");
    $("#budget_allocations :input[type='button']").hide();
  <% end %>
</script>
