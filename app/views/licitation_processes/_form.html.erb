<div class="tabs">
  <ul>
    <li><a href="#general">Dados gerais</a></li>
    <li><a href="#documents">Documentos</a></li>
    <li><a href="#budget_allocations">Dotações orçamentárias</a></li>
    <li><a href="#publications-tab">Publicações</a></li>
  </ul>

  <div id="general">
    <%= render 'general', :f => f %>
  </div>

  <div id="documents">
    <%= render 'documents', :f => f %>
  </div>

  <div id="budget_allocations">
    <%= render 'budget_allocations', :f => f %>
  </div>

  <div id="publications-tab">
    <%= render 'publications', :f => f %>
  </div>
</div>

<script>
  function abreviatedProcessModality(modality) {
    var abreviations = <%= AbreviatedProcessModality.to_a.to_json.html_safe %>,
        index;

    for (index in abreviations) {
      if (abreviations[index][1] == modality) {
        return abreviations[index][0];
      }
    }
  }

  function cleanExistingAdministrativeProcessBudgetAllocations() {
    $(".licitation-process-budget-allocation").remove()
  }

  function createAdministrativeProcessBudgetAllocations(budgetAllocations) {
    cleanExistingAdministrativeProcessBudgetAllocations();

    var template = $('#administrative-process-budget-allocations-template'),
        target = $('#budget-allocations');

    $(budgetAllocations).each(function() {
      target.append(template.mustache({id: this.id,
                                       description: this.description,
                                       administrative_process_id: this.administrative_process_id,
                                       budget_allocation_id: this.budget_allocation_id,
                                       uuid_administrative_process_budget_allocation: _.uniqueId('fresh-'),
                                       value: floatToPtBrString(this.value),
                                       expenseNature: this.expense_nature,
                                       amount: floatToPtBrString(this.amount)}));
    });
  }

  $("#licitation_process_administrative_process_id").change(function (event, data) {
    if (data) {
      var record = data.record;

      $('#licitation_process_administrative_process_budget_unit').val(record.data("budget-unit"));
      $('#licitation_process_administrative_process_modality_humanize').val(record.data("modality-humanize"));
      $('#licitation_process_administrative_process_object_type_humanize').val(record.data("object-type-humanize"));
      $('#licitation_process_administrative_process_judgment_form').val(record.data("judgment-form"));
      $('#licitation_process_administrative_process_description').val(record.data("description"));
      $('#licitation_process_administrative_process_responsible').val(record.data("responsible"));
      $('#licitation_process_administrative_process_item').val(record.data("item"));
      $('#licitation_process_modality').val(abreviatedProcessModality(record.data("modality")));
      $("#licitation_process_administrative_process_attributes_id").val(record.data("id"));

      createAdministrativeProcessBudgetAllocations(record.data("budget-allocations"));
      filterTypesOfCalculation(record.data("judgment-form-kind"), record.data("object-type"), record.data("modality"));
    } else {
      $('#licitation_process_administrative_process_budget_unit').val('');
      $('#licitation_process_administrative_process_modality_humanize').val('');
      $('#licitation_process_administrative_process_object_type_humanize').val('');
      $('#licitation_process_administrative_process_judgment_form').val('');
      $('#licitation_process_administrative_process_description').val('');
      $('#licitation_process_administrative_process_responsible').val('');
      $('#licitation_process_administrative_process_item').val('');
      $('#licitation_process_modality').val('');

      cleanExistingAdministrativeProcessBudgetAllocations();
    }
  });

  $('form.licitation_process').delegate('.material', 'change', function (event, data) {
    if (data){
      var record = data.record;

      $(this).closest('.item').find('.reference-unit').val(record.data("reference-unit"));
    }
  });

  function calcItemOrder() {
    $('fieldset.licitation-process-budget-allocation').each(function(index, item){
      $(this).find('.item .hidden .destroy[value=false]').each(function(index, item){
        $(this).parent().parent().find('.order').val(index + 1);
      });
    });
  }

  function calculateTotalOfItems(administrativeProcessBudgetAllocation) {
    var itemPrices = administrativeProcessBudgetAllocation.find('.item-price:visible'),
        totalValue = 0;

    itemPrices.each(function() {
      totalValue += parsePtBrFloat(this.value);
    });

    administrativeProcessBudgetAllocation.find('.total-value').val(floatToPtBrString(totalValue));
  }

  $('form.licitation_process').delegate('.remove-item', 'click', function() {
    calcItemOrder();
    calculateTotalOfItems($(this).closest('.licitation-process-budget-allocation'));
  });

  $('form.licitation_process').bind('append.mustache', function(){
    calcItemOrder();
  });

  calcItemOrder();

  $('form.licitation_process').delegate('.item-quantity, .item-unit-price', 'keyup', function() {
    var itemDiv = $(this).closest('.item'),
        itemQuantity = parsePtBrFloat(itemDiv.find('.item-quantity').val() || '0'),
        itemUnitPrice = parsePtBrFloat(itemDiv.find('.item-unit-price').val() || '0'),
        total = floatToPtBrString(itemQuantity * itemUnitPrice);

    itemDiv.find('.item-price').val(total);
    calculateTotalOfItems(itemDiv.closest('.licitation-process-budget-allocation'));
  });

  $('form.licitation_process').delegate('.item-price', 'keyup', function() {
    var itemDiv = $(this).closest('.item'),
        itemQuantity = parsePtBrFloat(itemDiv.find('.item-quantity').val() || '0'),
        itemPrice = parsePtBrFloat(itemDiv.find('.item-price').val() || '0'),
        unitPrice = floatToPtBrString(itemPrice / itemQuantity);

    itemDiv.find('.item-unit-price').val(unitPrice);
    calculateTotalOfItems(itemDiv.closest('.licitation-process-budget-allocation'));
  });

  <% unless resource.can_update? %>
    $('form.licitation_process .add-licitation-process-budget-allocation').hide();
    $('form.licitation_process .remove-licitation-process-budget-allocation').hide();
    $('form.licitation_process .add-licitation-process-publication').hide();
    $('form.licitation_process .remove-licitation-process-publication').hide();
    $('form.licitation_process .document-type .modal-finder-remove').hide();
    $('form.licitation_process .add-licitation-process-bidder').hide();
    $('form.licitation_process .remove-licitation-process-bidder').hide();
    $('form.licitation_process :input').attr('disabled', true);
  <% end %>

  function filterTypesOfCalculation (judgmentKind, objectType, modality) {
    var typesOfCalculationGroupsForJudgmentFormKind = <%= LicitationProcessTypesOfCalculationByJudgmentFormKind.new.types_of_calculation_groups.to_json.html_safe %>,
        typesOfCalculationGroupsForObjectType   = <%= LicitationProcessTypesOfCalculationByObjectType.new.types_of_calculation_groups.to_json.html_safe %>,
        typesOfCalculationGroupsForModality     = <%= LicitationProcessTypesOfCalculationByModality.new.types_of_calculation_groups.to_json.html_safe %>,
        typesOfCalculationOptions               = _(<%= LicitationProcessTypeOfCalculation.to_a.to_json.html_safe %>),
        options                                 = typesOfCalculationGroupsForJudgmentFormKind[judgmentKind] || [],
        optionsForObjectType                    = _(typesOfCalculationGroupsForObjectType[objectType] || []),
        optionsForModality                      = _(typesOfCalculationGroupsForModality[modality] || []);


    if (!optionsForObjectType.include(options[1])) {
      delete options[1];
    }

    if (!optionsForModality.include(options[2])) {
      delete options[2];
    }

    if (_.size(options) == 0) {
      $("#licitation_process_type_of_calculation").empty().closest("div.input").hide();
      return;
    }

    $("#licitation_process_type_of_calculation").html("<option></option>").closest("div.input").show();;

    typesOfCalculationOptions.each(function (option) {
      if (_(options).include(option[1])) {
        $("#licitation_process_type_of_calculation").append(function () {
          return $("<option>").text(option[0]).val(option[1]);
        });
      }
    });
  }

  filterTypesOfCalculation('<%= f.object.administrative_process_judgment_form_kind %>',
                           '<%= f.object.administrative_process_object_type %>',
                           '<%= f.object.administrative_process_modality %>');
  $("#licitation_process_type_of_calculation").val("<%= f.object.type_of_calculation %>");
</script>
