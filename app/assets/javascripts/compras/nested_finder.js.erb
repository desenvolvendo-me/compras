<%# encoding: utf-8 %>

$(function () {
  $(document).on("click", '.nested-fields .nested-add-record', function(event) {
    event.preventDefault();

    var template = $(this).data('template'),
        clearFieldsAfterAdd = true,
        recordsTableId = $(this).data('records'),
        nestedFields = $(this).closest('.nested-fields');

    if ( nestedRequiredFields(nestedFields) && nestedUniqueFields(nestedFields, recordsTableId) ) {
      if ( !_.isUndefined($(this).data('clear-after-add')) ) {
        clearFieldsAfterAdd = $(this).data('clear-after-add');
      }

      $('#' + recordsTableId).append($('#' + template).mustache(getNestedMustacheData(nestedFields)));

      if (clearFieldsAfterAdd) {
        nestedFields.find(':input').each(function() {
          if ($(this).hasClass('numeric')) {
            $(this).val('0,00');
          } else {
            $(this).val('');
          }
        });
      }
    }
  });

  $(document).on('click', '.nested-record .remove-nested-record', function(event) {
    event.preventDefault();

    $(this).closest('.nested-record').find('.destroy').val(true);
    $(this).closest('.nested-record').hide();
  });


  function nestedRequiredFields(nestedFields) {
    var allowed = true;

    nestedFields.find('.required:input').each(function(){
      if ($(this).val() === '' && allowed) {
        allowed = false;
      }
    });

    if (!allowed) {
      alert("<%= I18n.t('errors.messages.all_required_fields_should_be_filled') %>");
    }

    return allowed;
  }

  function nestedUniqueFields(nestedFields, recordTableId) {
    var records = $('#' + recordTableId).find('.nested-record'),
        matches, name, valuei, unique = true;

    nestedFields.find('.unique:input').each(function() {
      matches = $(this).attr('name').match(/\[(\w+)\]/);

      if (matches) {
        name = matches[1];
        value = $(this).val();

        records.find(':input[name*="[' + name + ']"]').each(function() {
          if ($(this).val() == value) {
            unique = false;
          }
        });
      }
    });

    if (!unique) {
      alert("<%= I18n.t('errors.messages.record_already_exists') %>");
    }

    return unique;
  }
  /*
    Converte os fields do .nested-fields em json para passar para o mustache.

    - Campos boolean(checkbox) serão transformados em 2 campos json, o primeiro
      é o próprio nome do field com o valor ou vazio dependendo se está marcado
      ou não, e o segundo campo é o field_text, que contém a string 'Sim' ou
      'Não' conforme o estado do checkbox.

    - Campos select também serão transformados em 2 campos json, o primeiro
      é o próprio nome do field e conterá o id do option selecionado e o segundo
      é o field_text que conterá o texto do option selecionado.
  */
  function getNestedMustacheData(nestedFields) {
    var data = {
      uuid: _.uniqueId('fresh-')
    };

    nestedFields.find(':input').each(function() {
      var name = $(this).attr('name'),
          matches = name.match(/\[(\w+)\]/);

      if ( matches ) { // Remove o prefixo do nome do campo
        if ( $(this).is(':checkbox') ){
          if ( $(this).is(':checked') ) {
            data[matches[1]] = $(this).val();
            data[matches[1] + '_text'] = 'Sim';
          } else {
            data[matches[1]] = '';
            data[matches[1] + '_text'] = 'Não';
          }
        } else if ( $(this).is('select') ) {
          data[matches[1]] = $(this).val();
          data[matches[1] + '_text'] = $(this).find('option:selected').text();
        } else {
          data[matches[1]] = $(this).val();
        }
      }
    });

    return data;
  }
});
